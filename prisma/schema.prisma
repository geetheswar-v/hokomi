datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
// Provided by NextAuth.js
// https://authjs.dev/getting-started/adapters/prisma#schema
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  passwordResetTokens PasswordResetToken[]
  
  // Anime/Manga tracking
  animeEntries    AnimeEntry[]
  mangaEntries    MangaEntry[]
  favorites       Favorite[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [email], references: [email], onDelete: Cascade)
 
  createdAt DateTime @default(now())
}

// Anime/Manga tracking models
model AnimeEntry {
  id        String   @id @default(cuid())
  userId    String
  malId     Int      // MyAnimeList ID
  title     String
  imageUrl  String?
  status    WatchStatus @default(PLAN_TO_WATCH)
  episodesWatched Int @default(0) // episodes watched
  totalEpisodes Int? // can be null for ongoing series
  startDate DateTime?
  endDate   DateTime?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, malId])
}

model MangaEntry {
  id        String   @id @default(cuid())
  userId    String
  malId     Int      // MyAnimeList ID
  title     String
  imageUrl  String?
  status    ReadStatus @default(PLAN_TO_READ)
  chaptersRead Int   @default(0)
  totalChapters Int? // can be null for ongoing series
  startDate DateTime?
  endDate   DateTime?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, malId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  malId     Int      // MyAnimeList ID
  type      MediaType
  title     String
  imageUrl  String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, malId, type])
}

enum WatchStatus {
  WATCHING
  COMPLETED
  ON_HOLD
  DROPPED
  PLAN_TO_WATCH
}

enum ReadStatus {
  READING
  COMPLETED
  ON_HOLD
  DROPPED
  PLAN_TO_READ
}

enum MediaType {
  ANIME
  MANGA
}